
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  authProvider: 'authProvider',
  authId: 'authId',
  username: 'username',
  nickname: 'nickname',
  profilePictureUrl: 'profilePictureUrl',
  bio: 'bio',
  gender: 'gender',
  birthDate: 'birthDate',
  country: 'country',
  region: 'region',
  level: 'level',
  vipLevel: 'vipLevel',
  coins: 'coins',
  diamonds: 'diamonds',
  email: 'email',
  password: 'password',
  passwordChangedAt: 'passwordChangedAt',
  isEmailVerified: 'isEmailVerified',
  lastLoginAt: 'lastLoginAt',
  followingCount: 'followingCount',
  followerCount: 'followerCount',
  status: 'status',
  isOnline: 'isOnline',
  preferences: 'preferences',
  allowDirectMessages: 'allowDirectMessages',
  notificationSettings: 'notificationSettings',
  blockedUserIds: 'blockedUserIds',
  accountStatus: 'accountStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
  isPrivate: 'isPrivate',
  pinnedMessagesInRooms: 'pinnedMessagesInRooms',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  twoFactorRecoveryCodes: 'twoFactorRecoveryCodes',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationExpiresAt: 'emailVerificationExpiresAt',
  passwordResetToken: 'passwordResetToken',
  passwordResetExpiresAt: 'passwordResetExpiresAt',
  postCount: 'postCount',
  invitedByForeignKey: 'invitedByForeignKey'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  title: 'title',
  description: 'description',
  coverImageUrl: 'coverImageUrl',
  type: 'type',
  passwordHash: 'passwordHash',
  maxParticipants: 'maxParticipants',
  currentParticipantCount: 'currentParticipantCount',
  activeParticipants: 'activeParticipants',
  moderators: 'moderators',
  speakerSeatCount: 'speakerSeatCount',
  speakerSeatAssignments: 'speakerSeatAssignments',
  rtcChannelName: 'rtcChannelName',
  tags: 'tags',
  status: 'status',
  pinnedMessageIds: 'pinnedMessageIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  roomId: 'roomId',
  messageType: 'messageType',
  content: 'content',
  giftId: 'giftId',
  readStatus: 'readStatus',
  isDeletedFor: 'isDeletedFor',
  isPinned: 'isPinned',
  reactions: 'reactions',
  createdAt: 'createdAt',
  repliedToMessageId: 'repliedToMessageId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transactionType: 'transactionType',
  amount: 'amount',
  currency: 'currency',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  description: 'description',
  platform: 'platform',
  platformTransactionId: 'platformTransactionId',
  status: 'status',
  paymentGatewayToken: 'paymentGatewayToken',
  createdAt: 'createdAt'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  followerId: 'followerId',
  followingId: 'followingId',
  createdAt: 'createdAt'
};

exports.Prisma.FollowRequestScalarFieldEnum = {
  id: 'id',
  requesterId: 'requesterId',
  recipientId: 'recipientId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl',
  entryCost: 'entryCost',
  rewardStructure: 'rewardStructure',
  isActive: 'isActive',
  developer: 'developer',
  publisher: 'publisher',
  releaseDate: 'releaseDate',
  platformCompat: 'platformCompat',
  likeCount: 'likeCount',
  playCount: 'playCount',
  averageRating: 'averageRating',
  ratingCount: 'ratingCount',
  createdAt: 'createdAt',
  categoryId: 'categoryId'
};

exports.Prisma.GenreTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt'
};

exports.Prisma.GameGenreTagScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  genreTagId: 'genreTagId',
  assignedAt: 'assignedAt'
};

exports.Prisma.GameLikeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  createdAt: 'createdAt'
};

exports.Prisma.GameRatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  gameId: 'gameId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  iconUrl: 'iconUrl',
  createdAt: 'createdAt'
};

exports.Prisma.GameSessionScalarFieldEnum = {
  id: 'id',
  gameId: 'gameId',
  hostId: 'hostId',
  participants: 'participants',
  viewerIds: 'viewerIds',
  maxPlayers: 'maxPlayers',
  currentPlayers: 'currentPlayers',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.GiftScalarFieldEnum = {
  id: 'id',
  giftId: 'giftId',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  animationUrl: 'animationUrl',
  cost: 'cost',
  value: 'value',
  category: 'category',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporterId: 'reporterId',
  reportedUserId: 'reportedUserId',
  reportedStreamId: 'reportedStreamId',
  reportedRoomId: 'reportedRoomId',
  reportedMessageId: 'reportedMessageId',
  reason: 'reason',
  description: 'description',
  status: 'status',
  reviewedById: 'reviewedById',
  reviewTimestamp: 'reviewTimestamp',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  recipientId: 'recipientId',
  senderId: 'senderId',
  type: 'type',
  relatedEntityId: 'relatedEntityId',
  relatedEntityType: 'relatedEntityType',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.StreamScalarFieldEnum = {
  id: 'id',
  broadcasterId: 'broadcasterId',
  title: 'title',
  coverImageUrl: 'coverImageUrl',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  currentViewers: 'currentViewers',
  peakViewers: 'peakViewers',
  totalDiamondsReceived: 'totalDiamondsReceived',
  tags: 'tags',
  location: 'location',
  rtcChannelName: 'rtcChannelName',
  recordingUrl: 'recordingUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  revokedAt: 'revokedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.OneSignalPlayerScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  userId: 'userId',
  deviceInfo: 'deviceInfo',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt'
};

exports.Prisma.TrustedDeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deviceName: 'deviceName',
  deviceType: 'deviceType',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  isCurrentDevice: 'isCurrentDevice',
  lastUsedAt: 'lastUsedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserGender = exports.$Enums.UserGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_SAY: 'PREFER_NOT_SAY'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BANNED: 'BANNED'
};

exports.UserAccountStatus = exports.$Enums.UserAccountStatus = {
  ACTIVE: 'ACTIVE',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  SUSPENDED: 'SUSPENDED'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  WIP: 'WIP'
};

exports.ChatRoomType = exports.$Enums.ChatRoomType = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  VOICE_ONLY: 'VOICE_ONLY'
};

exports.ChatRoomStatus = exports.$Enums.ChatRoomStatus = {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  ARCHIVED: 'ARCHIVED'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  GIFT: 'GIFT',
  SYSTEM: 'SYSTEM'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  COIN_PURCHASE: 'COIN_PURCHASE',
  GIFT_SEND: 'GIFT_SEND',
  DIAMOND_CONVERSION: 'DIAMOND_CONVERSION',
  STREAM_REWARD: 'STREAM_REWARD'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.FollowRequestStatus = exports.$Enums.FollowRequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.GameSessionStatus = exports.$Enums.GameSessionStatus = {
  WAITING: 'WAITING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  PENDING: 'PENDING',
  REVIEWED_ACCEPTED: 'REVIEWED_ACCEPTED',
  REVIEWED_REJECTED: 'REVIEWED_REJECTED',
  RESOLVED: 'RESOLVED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_FOLLOWER: 'NEW_FOLLOWER',
  MESSAGE_RECEIVED: 'MESSAGE_RECEIVED',
  GIFT_RECEIVED: 'GIFT_RECEIVED',
  SYSTEM_ANNOUNCEMENT: 'SYSTEM_ANNOUNCEMENT',
  FRIEND_REQUEST_RECEIVED: 'FRIEND_REQUEST_RECEIVED',
  FRIEND_REQUEST_ACCEPTED: 'FRIEND_REQUEST_ACCEPTED',
  REPORT_UPDATE: 'REPORT_UPDATE'
};

exports.StreamStatus = exports.$Enums.StreamStatus = {
  LIVE: 'LIVE',
  OFFLINE: 'OFFLINE',
  SCHEDULED: 'SCHEDULED',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  ChatRoom: 'ChatRoom',
  Message: 'Message',
  Transaction: 'Transaction',
  Follow: 'Follow',
  FollowRequest: 'FollowRequest',
  Game: 'Game',
  GenreTag: 'GenreTag',
  GameGenreTag: 'GameGenreTag',
  GameLike: 'GameLike',
  GameRating: 'GameRating',
  GameCategory: 'GameCategory',
  GameSession: 'GameSession',
  Gift: 'Gift',
  Report: 'Report',
  Notification: 'Notification',
  Stream: 'Stream',
  RefreshToken: 'RefreshToken',
  OneSignalPlayer: 'OneSignalPlayer',
  TrustedDevice: 'TrustedDevice'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
